name: OCM
on:
  workflow_dispatch:
      inputs:
        chartOCIPath:
          required: true
          type: string
          description: "OCI registry path for chart in GHCR"
          default: ghcr.io/olegershov/images/charts/wordpress:26.0.0
        componentName:
          required: true
          type: string
          description: "Component name"
          default: ocm-component/wordpress
        componentConstructorFile:
          required: false
          type: string
          description: "Path to the ocm constructor"
          default: .ocm/component-constructor-chart-only.yml
        ocmRegistryUrl:
          type: string
          description: "OCI registry path for ocm component"
          default: ghcr.io/olegershov/images

jobs:
  ocm:
    runs-on: ubuntu-latest
    steps:
      - name: Setup yq@latest
        run: |
          if ! command -v yq &>/dev/null
          then
            mkdir -p /home/runner/.local/bin
            wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /home/runner/.local/bin/yq &&\
              chmod +x /home/runner/.local/bin/yq
          fi

      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Setup OCM CLI
        run: |
          REPO=open-component-model/ocm
          if [ -z "$version" -o "$version" == latest ]; then
            version="$(basename "$(curl -Ls -o /dev/null -w %{url_effective} https://github.com/$REPO/releases/latest)")"
            echo "Selecting latest version: $version"
          fi
          VERSION=${version#v}
          ARCHIVE_FILE="ocm-${VERSION}-linux-amd64.tar.gz"
          URL="https://github.com/$REPO/releases/download/v${VERSION}/$ARCHIVE_FILE"
          echo "Installing ocm-cli version $version from $REPO"
          curl -LsS -o ocm-cli.tgz "$URL"
          tar --overwrite -xvzf ocm-cli.tgz >/dev/null
          chmod a+x ocm

      - name: Write Credentials file
        run: |
          cat <<EOF > $HOME/.ocmconfig
          type: generic.config.ocm.software/v1
          configurations:
            - type: credentials.config.ocm.software
              consumers:
                - identity:
                    type: OCIRegistry
                    scheme: https
                    hostname: ghcr.io
                    pathprefix: platform-mesh
                  credentials:
                    - type: Credentials
                      properties:
                        username: github
                        password: ${{ secrets.GHCR_PAT }}
          EOF

      - name: Pull Helm Chart from GHCR
        run: |
          mkdir -p ./charts
          echo "${{ secrets.GHCR_PAT }}" | helm registry login ghcr.io \
            --username github \
            --password-stdin
          helm pull oci://${{ inputs.chartOCIPath }} --untar --untardir ./charts
          chart_dir=$(ls ./charts)
          echo "CHART_PATH=./charts/$chart_dir" >> $GITHUB_ENV

      - name: Prepare Template Variables
        run: |
          IMAGE_NAME=$(yq '.image.name' $CHART_PATH/values.yaml)
          APP_VERSION=$(yq '.appVersion' $CHART_PATH/Chart.yaml)
          CHART_NAME=$(yq '.name' $CHART_PATH/Chart.yaml)
          VERSION=$(yq '.version' $CHART_PATH/Chart.yaml)

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "CHART_OCI_PATH=oci://${{ inputs.chartOCIPath }}" >> $GITHUB_ENV

      - name: Create OCM ComponentArchive
        run: |
          ocm_ctf=.ocm/transport.ctf
          mkdir -p "$(dirname "$ocm_ctf")"
          ./ocm add components -c --templater=go --file "$ocm_ctf" ${{ inputs.componentConstructorFile }} -- \
            VERSION=${{ env.VERSION }} \
            APP_VERSION=${{ env.APP_VERSION}} \
            IMAGE_NAME=${{ env.IMAGE_NAME}} \
            COMMIT=${{ github.sha }} \
            CHART_OCI_PATH=${{ env.CHART_OCI_PATH }} \
            COMPONENT_NAME=${{ inputs.componentName }} \
            LOCAL_CHART_PATH=${CHART_PATH}

      - name: Transfer to OCM REPO
        run: ./ocm transfer ctf --overwrite .ocm/transport.ctf "${{ inputs.ocmRegistryUrl }}"
